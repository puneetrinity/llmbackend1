# .github/workflows/security.yml
name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - bandit
        - codeql
        - semgrep
        - dependencies

env:
  PYTHON_VERSION: '3.11'

jobs:
  bandit:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'bandit' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    - name: Run Bandit scan
      run: |
        # Create bandit configuration if it doesn't exist
        if [ ! -f bandit.yaml ] && [ ! -f pyproject.toml ]; then
          cat > bandit.yaml << EOF
        exclude_dirs:
          - tests
          - venv
          - .venv
          - env
          - migrations
          - alembic/versions
        skips:
          - B101  # assert_used
        EOF
        fi
        
        # Run bandit with proper error handling
        bandit -r app -f json -o bandit-report.json --exit-zero-on-skipped
        
        # Check if we have any results
        if [ ! -f bandit-report.json ]; then
          echo '{"results": [], "errors": [], "generated_at": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'", "metrics": {}}' > bandit-report.json
        fi
    
    - name: Convert Bandit to SARIF
      run: |
        python3 << 'EOF'
        import json
        import sys
        from datetime import datetime
        
        def convert_bandit_to_sarif():
            try:
                with open('bandit-report.json', 'r') as f:
                    bandit_data = json.load(f)
            except Exception as e:
                print(f"Error reading bandit report: {e}")
                return
        
            # SARIF template
            sarif_output = {
                "version": "2.1.0",
                "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
                "runs": [{
                    "tool": {
                        "driver": {
                            "name": "Bandit",
                            "version": "1.8.3",
                            "informationUri": "https://bandit.readthedocs.io/",
                            "semanticVersion": "1.8.3",
                            "rules": []
                        }
                    },
                    "results": []
                }]
            }
            
            # Convert results
            for result in bandit_data.get('results', []):
                # Map severity
                severity_map = {
                    "LOW": "note",
                    "MEDIUM": "warning", 
                    "HIGH": "error"
                }
                
                severity = severity_map.get(result.get('issue_severity', 'MEDIUM'), 'warning')
                
                sarif_result = {
                    "ruleId": result.get('test_id', 'unknown'),
                    "message": {
                        "text": f"{result.get('issue_text', 'Security issue detected')} (Confidence: {result.get('issue_confidence', 'Unknown')})"
                    },
                    "level": severity,
                    "locations": [{
                        "physicalLocation": {
                            "artifactLocation": {
                                "uri": result.get('filename', 'unknown').replace(os.getcwd() + '/', '') if 'filename' in result else 'unknown'
                            },
                            "region": {
                                "startLine": result.get('line_number', 1),
                                "startColumn": result.get('col_offset', 1) if 'col_offset' in result else 1
                            }
                        }
                    }],
                    "ruleIndex": 0
                }
                
                sarif_output['runs'][0]['results'].append(sarif_result)
            
            # Write SARIF output
            with open('bandit-results.sarif', 'w') as f:
                json.dump(sarif_output, f, indent=2)
            
            print(f"Converted {len(sarif_output['runs'][0]['results'])} findings to SARIF format")
        
        import os
        convert_bandit_to_sarif()
        EOF
    
    - name: Upload Bandit SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results.sarif
        category: bandit-sast

  codeql:
    name: CodeQL Analysis  
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'codeql' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: codeql-python

  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'semgrep' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/python
          p/django
          p/flask
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Safety check
      run: |
        echo "## 🔒 Safety Dependency Scan" >> $GITHUB_STEP_SUMMARY
        safety check --json --output safety-report.json || true
        
        if [ -f safety-report.json ] && [ -s safety-report.json ]; then
          echo "### Vulnerabilities found:" >> $GITHUB_STEP_SUMMARY
          python3 -c "
        import json
        try:
            with open('safety-report.json', 'r') as f:
                data = json.load(f)
            for vuln in data:
                print(f\"- **{vuln.get('package', 'Unknown')}** {vuln.get('installed_version', '')}\")
                print(f\"  - {vuln.get('vulnerability', '')}\")
                print(f\"  - CVE: {vuln.get('id', 'N/A')}\")
        except:
            print('No vulnerabilities data found')
          " >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ No known vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Run pip-audit
      run: |
        echo "## 🔍 Pip-Audit Scan" >> $GITHUB_STEP_SUMMARY
        pip-audit --format=json --output=pip-audit-report.json || true
        
        if [ -f pip-audit-report.json ] && [ -s pip-audit-report.json ]; then
          echo "### Additional vulnerabilities found:" >> $GITHUB_STEP_SUMMARY
          python3 -c "
        import json
        try:
            with open('pip-audit-report.json', 'r') as f:
                data = json.load(f)
            for vuln in data.get('vulnerabilities', []):
                print(f\"- **{vuln.get('package', 'Unknown')}** {vuln.get('installed_version', '')}\")
                for alias in vuln.get('aliases', []):
                    print(f\"  - {alias}\")
        except:
            print('No additional vulnerabilities found')
          " >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ No additional vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [bandit, codeql, semgrep, dependency-scan]
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Bandit | ${{ needs.bandit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | ${{ needs.semgrep.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependencies | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY
