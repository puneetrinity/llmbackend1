# .github/workflows/reusable-docker-build.yml
name: Reusable Docker Build

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Name of the Docker image'
        required: true
        type: string
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: 'Dockerfile'
      build_context:
        description: 'Build context directory'
        required: false
        type: string
        default: '.'
      platforms:
        description: 'Target platforms for build'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
      push_to_registry:
        description: 'Push to container registry'
        required: false
        type: boolean
        default: true
      run_tests:
        description: 'Run tests after build'
        required: false
        type: boolean
        default: true
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
    
    outputs:
      image_digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.digest }}
      image_tags:
        description: 'Image tags'
        value: ${{ jobs.build.outputs.tags }}
      image_version:
        description: 'Image version'
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}
      version: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # Login to registry
      - name: Log in to Container Registry
        if: inputs.push_to_registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ github.repository }}/${{ inputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge,branch=main
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      # Build and push
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile_path }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push_to_registry }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Test job (optional)
  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: inputs.run_tests && inputs.push_to_registry
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Docker image
        run: |
          IMAGE="${{ inputs.registry }}/${{ github.repository }}/${{ inputs.image_name }}:${{ needs.build.outputs.version }}"
          echo "Testing image: $IMAGE"
          
          # Run basic container test
          docker run --rm --name test-container -d -p 8000:8000 "$IMAGE"
          sleep 30
          
          # Test health endpoint if available
          if curl -f http://localhost:8000/health; then
            echo "Health check passed"
          else
            echo "Health check failed, but continuing..."
          fi
          
          # Cleanup
          docker stop test-container || true

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: inputs.push_to_registry
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.registry }}/${{ github.repository }}/${{ inputs.image_name }}:${{ needs.build.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
