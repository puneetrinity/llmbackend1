# .github/workflows/docker-build-optimized.yml
name: Optimized Docker Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: false
        default: 'linux/amd64'
        type: choice
        options:
          - linux/amd64
          - linux/arm64
          - linux/amd64,linux/arm64

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKER: docker.io
  IMAGE_NAME: llm-search-backend

jobs:
  # Build AMD64 (fastest)
  build-amd64:
    name: Build AMD64 Image
    runs-on: ubuntu-latest
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.meta.outputs.json }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_GHCR }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=edge,branch=main
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push AMD64
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Build ARM64 (only for releases or manual trigger)
  build-arm64:
    name: Build ARM64 Image  
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.platform == 'linux/arm64' || github.event.inputs.platform == 'linux/amd64,linux/arm64'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_GHCR }}/${{ github.repository }}
          flavor: |
            suffix=-arm64
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=edge,branch=main
      
      - name: Build and push ARM64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64

  # Quick test
  test:
    name: Quick Test
    runs-on: ubuntu-latest
    needs: build-amd64
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Test image
        run: |
          IMAGE="${{ env.REGISTRY_GHCR }}/${{ github.repository }}:${{ needs.build-amd64.outputs.image-metadata && fromJSON(needs.build-amd64.outputs.image-metadata).labels['org.opencontainers.image.version'] || 'latest' }}"
          echo "Testing image: $IMAGE"
          
          # Run quick test
          docker run --rm -d --name test-app -p 8000:8000 "$IMAGE"
          sleep 15
          
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          echo "âœ… Health check passed"
          
          # Cleanup
          docker stop test-app

  # Security scan (fast)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-amd64
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ github.repository }}:${{ needs.build-amd64.outputs.image-metadata && fromJSON(needs.build-amd64.outputs.image-metadata).labels['org.opencontainers.image.version'] || 'latest' }}
          format: 'table'
          exit-code: '0'  # Don't fail on vulnerabilities
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
